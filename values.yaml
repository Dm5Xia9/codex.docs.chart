replicaCount: 1

configuration:
  port: 3000
  host: "0.0.0.0"
  uploads:
    driver: "s3"
    s3:
      bucket: "my-bucket"
      region: "eu-central-1"
      baseUrl: "http://docs-static.codex.so.s3-website.eu-central-1.amazonaws.com"
      keyPrefix: "/"
      accessKeyId: "my-access-key"
      secretAccessKey: "my-secret-key"
  frontend:
    title: "CodeX Docs"
    description: "A block-styled editor with clean JSON output"
    startPage: ""
    misprintsChatId: "12344564"
    yandexMetrikaId: ""
    carbon:
      serve: ""
      placement: ""
    menu:
      - "Guides"
      - title: "CodeX"
        uri: "https://codex.so"

  auth:
    password: "will be generated automatically"
    secret: supersecret

  database:
    driver: mongodb # you can change database driver here. 'mongodb' or 'local'
    mongodb:
      uri: mongodb://localhost:27017/docs


# Authentication parameters
auth:
  # Auth password
  # Defaults to a random 20-character alphanumeric string if not set
  #
  password: ""
  # The name of an existing secret with auth credentials
  # NOTE: When it's set, the previous `auth.password` parameter is ignored
  #
  existingSecret: ""
  # Password key to be retrieved from existing secret
  # NOTE: ignored unless `auth.existingSecret` parameter is set
  #
  existingSecretPasswordKey: ""

image:
  repository: ghcr.io/codex-team/codex.docs
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
fullnameOverride: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 3000

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: codex-docs.local
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: web
              port:
                number: 3000
  tls: []

resources: {}

volumes:
  db:
    storage: 1Gi
    storageClassName: ""
  uploads:
    storage: 5Gi
    storageClassName: ""


nodeSelector: {}

tolerations: []

affinity: {}
